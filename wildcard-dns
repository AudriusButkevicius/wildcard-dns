#!/bin/python
from grp import getgrnam
from os import setgroups, setgid, setuid, umask
from pwd import getpwnam
from re import compile, I
from socket import socket, AF_INET, SOCK_DGRAM, gethostbyaddr, gethostbyname
from struct import pack
from sys import argv
from time import time


TYPE_A = 1
TYPE_NS = 2
TYPE_SOA = 6


STATIC = {
  # 'test.test.com.': '192.168.0.1'
}


def usage():
  print """Usage: %s BINDADDR PATTERN TTL

BINDADDR:
    IP or hostname to bind to, such as dns.myserver.com or 123.123.123.123
    This will also be used as an answer for SOA and NS questions matching
    the root domain of the pattern domain.


PATTERN:
    Wildcard pattern with [A].[B].[C].[D] tokens of the IP,
    as well as optional [IGNORE] token which matches anything.

    eg:
      [A]-[B]-[C]-[D].ip.test.com       -> 1-2-3-4.ip.test.com -> 1.2.3.4
      [D]-[A]-[B]-[C].ip.test.com       -> 1-2-3-4.ip.test.com -> 2.3.4.1
      [A]-[B]-[C]-[D].[IGNORE].test.com -> 1-2-3-4.XX.test.com -> 1.2.3.4
                                        -> 1-2-3-4.YY.test.com -> 1.2.3.4

    Please note tokens should be UPPERCASE and surrounded by [ and ].

TTL:
    Time-to-live in seconds

    Other DNS servers will cache the answer for this given period.
    Increase this value to reduce the amount of requests coming through to
    your server.

    Maximum value is 4294967295 seconds (~136 years)"""  % argv[0]
  exit(1)


def _fix(domain):
  """
  Turns:
  domain.com
  or
  domain.com.

  to:
  domain.com.
  """
  if domain == '.':
    return ''
  elif domain.endswith('.'):
    return domain
  return domain + '.'


def _domain(domain):
  """
  Turns:
  www.domain.com

  to:
  \x03www\x06domain\x03com\x00
  """
  return ''.join(chr(len(chunk)) + chunk for chunk in _fix(domain).split('.'))


def _ip(ip):
  """
  Turns:
  212.59.18.25

  to:
  \xd4;\x12\x19
  """""
  return ''.join(chr(int(seg)) for seg in ip.split('.'))


def _header(qtype, domain='\xc0\x0c'):
  answer  = domain              # Domain or pointer to domain in the payload
  answer += pack('>h', qtype)   # Response type
  answer += '\x00\x01'          # Response class
  answer += pack('>i', ttl)     # TTL
  return answer


def get_answer(data):
    domain=''
    if (ord(data[2]) >> 3) & 15 == 0:
      start = 12
      l = ord(data[start])
      while l != 0:
        domain += data[start+1:start+l+1]+'.'
        start += l+1
        l = ord(data[start])

    qtype = ord(data[-3])

    question_answers = []
    authority_answers = []
    additional_answers = []

    match = pattern.match(domain)

    # Answering questions

    if qtype == TYPE_A:                                             # A record
      answer  = _header(TYPE_A)
      answer += pack('>h', 4)                                           # Response length
      if match:                                                       # Dynamic A record
        answer += _ip('.'.join(match.group(seg) for seg in 'ABCD'))     # 4 bytes of IP
        question_answers.append(answer)
      elif domain in STATIC:                                          # Static A record
        answer += _ip(STATIC[domain])                                   # 4 bytes of IP
        question_answers.append(answer)
      elif domain.endswith(root):
        authority_answers.append(OWN_SOA)

    elif qtype == TYPE_NS:                                          # NS record
      if domain == root:                                              # Our own NS record
        question_answers.append(OWN_NS)
      elif domain.endswith(root):                                     # A NS record belonging to our domain which we cannot find
        authority_answers.append(OWN_SOA)

    elif qtype == TYPE_SOA:                                         # SOA record
      if domain == root:
        question_answers.append(OWN_SOA)
      elif domain.endswith(root):
        authority_answers.append(OWN_SOA)

    # Extra records

    # Add A record in case it's a A, NS or SOA answer refering to our domain
    if question_answers:
      answer  = _header(TYPE_A, _domain(hostname))
      answer += pack('>h', 4)
      answer += _ip(ip)

      additional_answers.append(answer)

      # Add NS record in case it's a A or a SOA answer refering to our domain
      if qtype != TYPE_NS:
        authority_answers.append(OWN_NS)

    # If its something from the wrong Opera, send to root nameservers

    if not domain.endswith(root):
      for rootserver in 'abcdefghijklm':
        answer  = _header(TYPE_NS, _domain('.'))
        answer += pack('>h', len(_domain(rootserver + '.root-servers.net')))
        answer += _domain(rootserver + '.root-servers.net')

        authority_answers.append(answer)

    # Build the final result

    result  = data[:2] + "\x81"                   # Identifier and flags

    if len(question_answers) > 0 or \
        not domain.endswith(root):                # Status code
      result += "\x80"                              # NOERROR
    elif domain.endswith(root):
      result += "\x83"                              # NXDOMAIN

    result += data[4:6]                           # Question count
    result += pack('>h', len(question_answers))   # Question answer count
    result += pack('>h', len(authority_answers))  # Authority record count
    result += pack('>h', len(additional_answers)) # Additional record count
    result += data[12:]                           # Original Questions

    for ans in question_answers + authority_answers + additional_answers:
      result += ans

    return result


if __name__ == '__main__':
  if len(argv) != 4:
    usage()

  started = int(time())

  if argv[1].replace('.', '').isdigit():
    ip = argv[1]
    hostname = gethostbyaddr(ip)[0]
  else:
    hostname = argv[1]
    ip = gethostbyname(hostname)

  root = '.'.join(_fix(argv[2]).split('.')[-3:])

  s = socket(AF_INET, SOCK_DGRAM)
  s.bind((argv[1], 53))

  # Drop priviledges
  setgroups([])
  setgid(getgrnam('nogroup').gr_gid)
  setuid(getpwnam('nobody').pw_uid)
  umask(077)

  pattern = argv[2].replace('.', '\.')
  for seg in 'ABCD':
    if '[%s]' % seg not in pattern:
      usage()
    pattern = pattern.replace('[%s]' % seg, '(?P<%s>[0-9]{1,2}|1[0-9]{2}|2[0-4][0-9]|25[0-5])' % seg)

  pattern = pattern.replace('[IGNORE]', '(?:.*)')
  pattern = compile('^' + pattern + '\.$', I)

  ttl = int(argv[3])

  # Construct own NS and own SOA records
  OWN_SOA  = _domain(hostname)                                       # SOA <BINDADDR>
  OWN_SOA += _domain('hostmaster.' + hostname)                       # SOA email (hostmaster.<BINDADDR>)
  OWN_SOA += pack('>i', int(time()))                                 # Serial timestamp (last modified)
  OWN_SOA += pack('>i', 3*60*60)                                     # Refresh interval (3 hours)
  OWN_SOA += pack('>i', 1*60*60)                                     # Retry interval (1 hour)
  OWN_SOA += pack('>i', 7*24*60*60)                                  # Expiration limit (7 days)
  OWN_SOA += pack('>i', 1*60*60)                                     # Minimum TTL (1 hour)
  OWN_SOA = _header(TYPE_SOA, _domain(root)) + pack('>h', len(OWN_SOA)) + OWN_SOA

  OWN_NS  = _header(TYPE_NS, _domain(root))
  OWN_NS += pack('>h', len(_domain(hostname)))
  OWN_NS += _domain(hostname)

  while 1:
    try:
      data, addr = s.recvfrom(1024)
      s.sendto(get_answer(data), addr)
    except KeyboardInterrupt:
      break
    except Exception, e:
      print e

  s.close()
